{"ast":null,"code":"var _jsxFileName = \"C:\\\\VSCode\\\\COWCO\\\\COWCO\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('cowco_user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Mock API call - replace with actual API\n      const mockUsers = [{\n        id: 1,\n        name: 'John Manager',\n        email: 'manager@cowco.com',\n        role: 'Farm Manager'\n      }, {\n        id: 2,\n        name: 'Dr. Sarah Vet',\n        email: 'vet@cowco.com',\n        role: 'Veterinarian'\n      }, {\n        id: 3,\n        name: 'Mike Worker',\n        email: 'worker@cowco.com',\n        role: 'Worker'\n      }, {\n        id: 4,\n        name: 'Admin User',\n        email: 'admin@cowco.com',\n        role: 'Admin'\n      }];\n      const foundUser = mockUsers.find(u => u.email === email);\n      if (foundUser && password === 'password123') {\n        const userData = {\n          ...foundUser,\n          token: 'mock-jwt-token'\n        };\n        setUser(userData);\n        localStorage.setItem('cowco_user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const signup = async userData => {\n    try {\n      // Mock API call - replace with actual API\n      const newUser = {\n        id: Date.now(),\n        name: userData.name,\n        email: userData.email,\n        role: userData.role,\n        token: 'mock-jwt-token'\n      };\n      setUser(newUser);\n      localStorage.setItem('cowco_user', JSON.stringify(newUser));\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('cowco_user');\n  };\n  const value = {\n    user,\n    login,\n    signup,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","email","password","mockUsers","id","name","role","foundUser","find","u","userData","token","setItem","stringify","success","error","message","signup","newUser","Date","now","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/VSCode/COWCO/COWCO/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const savedUser = localStorage.getItem('cowco_user');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Mock API call - replace with actual API\r\n      const mockUsers = [\r\n        { id: 1, name: 'John Manager', email: 'manager@cowco.com', role: 'Farm Manager' },\r\n        { id: 2, name: 'Dr. Sarah Vet', email: 'vet@cowco.com', role: 'Veterinarian' },\r\n        { id: 3, name: 'Mike Worker', email: 'worker@cowco.com', role: 'Worker' },\r\n        { id: 4, name: 'Admin User', email: 'admin@cowco.com', role: 'Admin' }\r\n      ];\r\n\r\n      const foundUser = mockUsers.find(u => u.email === email);\r\n      \r\n      if (foundUser && password === 'password123') {\r\n        const userData = { ...foundUser, token: 'mock-jwt-token' };\r\n        setUser(userData);\r\n        localStorage.setItem('cowco_user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    try {\r\n      // Mock API call - replace with actual API\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name: userData.name,\r\n        email: userData.email,\r\n        role: userData.role,\r\n        token: 'mock-jwt-token'\r\n      };\r\n      \r\n      setUser(newUser);\r\n      localStorage.setItem('cowco_user', JSON.stringify(newUser));\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('cowco_user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    signup,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}