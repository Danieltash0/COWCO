{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Mock task data\nconst mockTasks = [{\n  id: 1,\n  title: 'Morning Milking',\n  description: 'Complete morning milking for all cattle in Barn A',\n  assignedTo: 'Mike Worker',\n  assignedBy: 'John Manager',\n  status: 'completed',\n  priority: 'high',\n  dueDate: '2024-01-15',\n  completedDate: '2024-01-15T08:30:00',\n  category: 'milking'\n}, {\n  id: 2,\n  title: 'Health Check - Bessie',\n  description: 'Routine health check for Bessie (COW001)',\n  assignedTo: 'Dr. Sarah Vet',\n  assignedBy: 'John Manager',\n  status: 'in-progress',\n  priority: 'medium',\n  dueDate: '2024-01-16',\n  category: 'health'\n}, {\n  id: 3,\n  title: 'Feed Distribution',\n  description: 'Distribute feed to all cattle in both barns',\n  assignedTo: 'Mike Worker',\n  assignedBy: 'John Manager',\n  status: 'pending',\n  priority: 'high',\n  dueDate: '2024-01-15',\n  category: 'feeding'\n}, {\n  id: 4,\n  title: 'Barn Cleaning',\n  description: 'Clean and sanitize Barn B stalls',\n  assignedTo: 'Mike Worker',\n  assignedBy: 'John Manager',\n  status: 'pending',\n  priority: 'medium',\n  dueDate: '2024-01-16',\n  category: 'maintenance'\n}, {\n  id: 5,\n  title: 'Vaccination Schedule Review',\n  description: 'Review and update vaccination schedules for all cattle',\n  assignedTo: 'Dr. Sarah Vet',\n  assignedBy: 'John Manager',\n  status: 'pending',\n  priority: 'high',\n  dueDate: '2024-01-17',\n  category: 'health'\n}];\nexport const useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setTasks(mockTasks);\n      } catch (err) {\n        setError('Failed to fetch tasks');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTasks();\n  }, []);\n  const addTask = async taskData => {\n    try {\n      const newTask = {\n        id: Date.now(),\n        ...taskData,\n        status: 'pending',\n        createdAt: new Date().toISOString()\n      };\n      setTasks(prev => [...prev, newTask]);\n      return {\n        success: true,\n        task: newTask\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateTask = async (id, taskData) => {\n    try {\n      setTasks(prev => prev.map(task => task.id === id ? {\n        ...task,\n        ...taskData\n      } : task));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const deleteTask = async id => {\n    try {\n      setTasks(prev => prev.filter(task => task.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const completeTask = async id => {\n    try {\n      setTasks(prev => prev.map(task => task.id === id ? {\n        ...task,\n        status: 'completed',\n        completedDate: new Date().toISOString()\n      } : task));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getTasksByUser = userName => {\n    return tasks.filter(task => task.assignedTo === userName);\n  };\n  const getTasksByStatus = status => {\n    return tasks.filter(task => task.status === status);\n  };\n  const getTasksByCategory = category => {\n    return tasks.filter(task => task.category === category);\n  };\n  return {\n    tasks,\n    loading,\n    error,\n    addTask,\n    updateTask,\n    deleteTask,\n    completeTask,\n    getTasksByUser,\n    getTasksByStatus,\n    getTasksByCategory\n  };\n};\n_s(useTasks, \"qwRs5Xd4E7WtXCZK9zh6nomhOw4=\");","map":{"version":3,"names":["useState","useEffect","mockTasks","id","title","description","assignedTo","assignedBy","status","priority","dueDate","completedDate","category","useTasks","_s","tasks","setTasks","loading","setLoading","error","setError","fetchTasks","Promise","resolve","setTimeout","err","addTask","taskData","newTask","Date","now","createdAt","toISOString","prev","success","task","message","updateTask","map","deleteTask","filter","completeTask","getTasksByUser","userName","getTasksByStatus","getTasksByCategory"],"sources":["C:/VSCode/COWCO/COWCO/client/src/api/useTasks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Mock task data\r\nconst mockTasks = [\r\n  {\r\n    id: 1,\r\n    title: 'Morning Milking',\r\n    description: 'Complete morning milking for all cattle in Barn A',\r\n    assignedTo: 'Mike Worker',\r\n    assignedBy: 'John Manager',\r\n    status: 'completed',\r\n    priority: 'high',\r\n    dueDate: '2024-01-15',\r\n    completedDate: '2024-01-15T08:30:00',\r\n    category: 'milking'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Health Check - Bessie',\r\n    description: 'Routine health check for Bessie (COW001)',\r\n    assignedTo: 'Dr. Sarah Vet',\r\n    assignedBy: 'John Manager',\r\n    status: 'in-progress',\r\n    priority: 'medium',\r\n    dueDate: '2024-01-16',\r\n    category: 'health'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Feed Distribution',\r\n    description: 'Distribute feed to all cattle in both barns',\r\n    assignedTo: 'Mike Worker',\r\n    assignedBy: 'John Manager',\r\n    status: 'pending',\r\n    priority: 'high',\r\n    dueDate: '2024-01-15',\r\n    category: 'feeding'\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Barn Cleaning',\r\n    description: 'Clean and sanitize Barn B stalls',\r\n    assignedTo: 'Mike Worker',\r\n    assignedBy: 'John Manager',\r\n    status: 'pending',\r\n    priority: 'medium',\r\n    dueDate: '2024-01-16',\r\n    category: 'maintenance'\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Vaccination Schedule Review',\r\n    description: 'Review and update vaccination schedules for all cattle',\r\n    assignedTo: 'Dr. Sarah Vet',\r\n    assignedBy: 'John Manager',\r\n    status: 'pending',\r\n    priority: 'high',\r\n    dueDate: '2024-01-17',\r\n    category: 'health'\r\n  }\r\n];\r\n\r\nexport const useTasks = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setTasks(mockTasks);\r\n      } catch (err) {\r\n        setError('Failed to fetch tasks');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const addTask = async (taskData) => {\r\n    try {\r\n      const newTask = {\r\n        id: Date.now(),\r\n        ...taskData,\r\n        status: 'pending',\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      setTasks(prev => [...prev, newTask]);\r\n      return { success: true, task: newTask };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const updateTask = async (id, taskData) => {\r\n    try {\r\n      setTasks(prev => prev.map(task => \r\n        task.id === id ? { ...task, ...taskData } : task\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      setTasks(prev => prev.filter(task => task.id !== id));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const completeTask = async (id) => {\r\n    try {\r\n      setTasks(prev => prev.map(task => \r\n        task.id === id \r\n          ? { ...task, status: 'completed', completedDate: new Date().toISOString() }\r\n          : task\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const getTasksByUser = (userName) => {\r\n    return tasks.filter(task => task.assignedTo === userName);\r\n  };\r\n\r\n  const getTasksByStatus = (status) => {\r\n    return tasks.filter(task => task.status === status);\r\n  };\r\n\r\n  const getTasksByCategory = (category) => {\r\n    return tasks.filter(task => task.category === category);\r\n  };\r\n\r\n  return {\r\n    tasks,\r\n    loading,\r\n    error,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n    completeTask,\r\n    getTasksByUser,\r\n    getTasksByStatus,\r\n    getTasksByCategory\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,iBAAiB;EACxBC,WAAW,EAAE,mDAAmD;EAChEC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE,cAAc;EAC1BC,MAAM,EAAE,WAAW;EACnBC,QAAQ,EAAE,MAAM;EAChBC,OAAO,EAAE,YAAY;EACrBC,aAAa,EAAE,qBAAqB;EACpCC,QAAQ,EAAE;AACZ,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,uBAAuB;EAC9BC,WAAW,EAAE,0CAA0C;EACvDC,UAAU,EAAE,eAAe;EAC3BC,UAAU,EAAE,cAAc;EAC1BC,MAAM,EAAE,aAAa;EACrBC,QAAQ,EAAE,QAAQ;EAClBC,OAAO,EAAE,YAAY;EACrBE,QAAQ,EAAE;AACZ,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,mBAAmB;EAC1BC,WAAW,EAAE,6CAA6C;EAC1DC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE,cAAc;EAC1BC,MAAM,EAAE,SAAS;EACjBC,QAAQ,EAAE,MAAM;EAChBC,OAAO,EAAE,YAAY;EACrBE,QAAQ,EAAE;AACZ,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,eAAe;EACtBC,WAAW,EAAE,kCAAkC;EAC/CC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE,cAAc;EAC1BC,MAAM,EAAE,SAAS;EACjBC,QAAQ,EAAE,QAAQ;EAClBC,OAAO,EAAE,YAAY;EACrBE,QAAQ,EAAE;AACZ,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,6BAA6B;EACpCC,WAAW,EAAE,wDAAwD;EACrEC,UAAU,EAAE,eAAe;EAC3BC,UAAU,EAAE,cAAc;EAC1BC,MAAM,EAAE,SAAS;EACjBC,QAAQ,EAAE,MAAM;EAChBC,OAAO,EAAE,YAAY;EACrBE,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMoB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QACvDP,QAAQ,CAACd,SAAS,CAAC;MACrB,CAAC,CAAC,OAAOuB,GAAG,EAAE;QACZL,QAAQ,CAAC,uBAAuB,CAAC;MACnC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAMC,OAAO,GAAG;QACdzB,EAAE,EAAE0B,IAAI,CAACC,GAAG,CAAC,CAAC;QACd,GAAGH,QAAQ;QACXnB,MAAM,EAAE,SAAS;QACjBuB,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;MAEDhB,QAAQ,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEL,OAAO,CAAC,CAAC;MACpC,OAAO;QAAEM,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAEP;MAAQ,CAAC;IACzC,CAAC,CAAC,OAAOT,KAAK,EAAE;MACd,OAAO;QAAEe,OAAO,EAAE,KAAK;QAAEf,KAAK,EAAEA,KAAK,CAACiB;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAOlC,EAAE,EAAEwB,QAAQ,KAAK;IACzC,IAAI;MACFX,QAAQ,CAACiB,IAAI,IAAIA,IAAI,CAACK,GAAG,CAACH,IAAI,IAC5BA,IAAI,CAAChC,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGgC,IAAI;QAAE,GAAGR;MAAS,CAAC,GAAGQ,IAC9C,CAAC,CAAC;MACF,OAAO;QAAED,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd,OAAO;QAAEe,OAAO,EAAE,KAAK;QAAEf,KAAK,EAAEA,KAAK,CAACiB;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMG,UAAU,GAAG,MAAOpC,EAAE,IAAK;IAC/B,IAAI;MACFa,QAAQ,CAACiB,IAAI,IAAIA,IAAI,CAACO,MAAM,CAACL,IAAI,IAAIA,IAAI,CAAChC,EAAE,KAAKA,EAAE,CAAC,CAAC;MACrD,OAAO;QAAE+B,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd,OAAO;QAAEe,OAAO,EAAE,KAAK;QAAEf,KAAK,EAAEA,KAAK,CAACiB;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMK,YAAY,GAAG,MAAOtC,EAAE,IAAK;IACjC,IAAI;MACFa,QAAQ,CAACiB,IAAI,IAAIA,IAAI,CAACK,GAAG,CAACH,IAAI,IAC5BA,IAAI,CAAChC,EAAE,KAAKA,EAAE,GACV;QAAE,GAAGgC,IAAI;QAAE3B,MAAM,EAAE,WAAW;QAAEG,aAAa,EAAE,IAAIkB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,GACzEG,IACN,CAAC,CAAC;MACF,OAAO;QAAED,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd,OAAO;QAAEe,OAAO,EAAE,KAAK;QAAEf,KAAK,EAAEA,KAAK,CAACiB;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMM,cAAc,GAAIC,QAAQ,IAAK;IACnC,OAAO5B,KAAK,CAACyB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAAC7B,UAAU,KAAKqC,QAAQ,CAAC;EAC3D,CAAC;EAED,MAAMC,gBAAgB,GAAIpC,MAAM,IAAK;IACnC,OAAOO,KAAK,CAACyB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAAC3B,MAAM,KAAKA,MAAM,CAAC;EACrD,CAAC;EAED,MAAMqC,kBAAkB,GAAIjC,QAAQ,IAAK;IACvC,OAAOG,KAAK,CAACyB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACvB,QAAQ,KAAKA,QAAQ,CAAC;EACzD,CAAC;EAED,OAAO;IACLG,KAAK;IACLE,OAAO;IACPE,KAAK;IACLO,OAAO;IACPW,UAAU;IACVE,UAAU;IACVE,YAAY;IACZC,cAAc;IACdE,gBAAgB;IAChBC;EACF,CAAC;AACH,CAAC;AAAC/B,EAAA,CA7FWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}