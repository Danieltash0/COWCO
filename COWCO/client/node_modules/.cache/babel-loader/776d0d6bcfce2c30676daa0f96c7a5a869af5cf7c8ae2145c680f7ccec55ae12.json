{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Mock reports data\nconst mockReports = [{\n  id: 1,\n  title: 'Monthly Milk Production Report',\n  type: 'production',\n  date: '2024-01-15',\n  generatedBy: 'John Manager',\n  status: 'completed',\n  data: {\n    totalMilk: 12500,\n    averagePerCow: 3125,\n    topProducer: 'Bessie',\n    totalCattle: 4\n  }\n}, {\n  id: 2,\n  title: 'Health Records Summary',\n  type: 'health',\n  date: '2024-01-14',\n  generatedBy: 'Dr. Sarah Vet',\n  status: 'completed',\n  data: {\n    totalCheckups: 4,\n    vaccinations: 2,\n    treatments: 1,\n    healthyCattle: 3\n  }\n}, {\n  id: 3,\n  title: 'Financial Report - Q4 2023',\n  type: 'financial',\n  date: '2024-01-10',\n  generatedBy: 'John Manager',\n  status: 'completed',\n  data: {\n    revenue: 45000,\n    expenses: 28000,\n    profit: 17000,\n    profitMargin: 37.8\n  }\n}];\n\n// Mock analytics data\nconst mockAnalytics = {\n  milkProduction: {\n    daily: [25, 28, 30, 27, 29, 31, 26],\n    weekly: [180, 195, 210, 185],\n    monthly: [1250, 1320, 1400, 1280]\n  },\n  financial: {\n    revenue: [42000, 45000, 48000, 52000],\n    expenses: [28000, 29000, 31000, 32000],\n    profit: [14000, 16000, 17000, 20000]\n  },\n  health: {\n    vaccinations: 8,\n    checkups: 12,\n    treatments: 3,\n    healthyRate: 85\n  },\n  tasks: {\n    completed: 45,\n    pending: 8,\n    overdue: 2,\n    completionRate: 82\n  }\n};\nexport const useReports = () => {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [analytics, setAnalytics] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setReports(mockReports);\n        setAnalytics(mockAnalytics);\n      } catch (err) {\n        setError('Failed to fetch reports data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const generateReport = async reportData => {\n    try {\n      const newReport = {\n        id: Date.now(),\n        ...reportData,\n        date: new Date().toISOString().split('T')[0],\n        status: 'completed',\n        data: generateMockData(reportData.type)\n      };\n      setReports(prev => [...prev, newReport]);\n      return {\n        success: true,\n        report: newReport\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const generateMockData = type => {\n    switch (type) {\n      case 'production':\n        return {\n          totalMilk: Math.floor(Math.random() * 15000) + 10000,\n          averagePerCow: Math.floor(Math.random() * 4000) + 2500,\n          topProducer: 'Bessie',\n          totalCattle: 4\n        };\n      case 'health':\n        return {\n          totalCheckups: Math.floor(Math.random() * 10) + 1,\n          vaccinations: Math.floor(Math.random() * 5) + 1,\n          treatments: Math.floor(Math.random() * 3),\n          healthyCattle: Math.floor(Math.random() * 4) + 1\n        };\n      case 'financial':\n        return {\n          revenue: Math.floor(Math.random() * 60000) + 40000,\n          expenses: Math.floor(Math.random() * 40000) + 20000,\n          profit: Math.floor(Math.random() * 30000) + 10000,\n          profitMargin: Math.floor(Math.random() * 50) + 20\n        };\n      default:\n        return {};\n    }\n  };\n  const deleteReport = async id => {\n    try {\n      setReports(prev => prev.filter(report => report.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getReportsByType = type => {\n    return reports.filter(report => report.type === type);\n  };\n  const getReportsByDateRange = (startDate, endDate) => {\n    return reports.filter(report => {\n      const reportDate = new Date(report.date);\n      return reportDate >= new Date(startDate) && reportDate <= new Date(endDate);\n    });\n  };\n  const getAnalyticsData = () => {\n    return analytics;\n  };\n  const exportReport = async (reportId, format = 'pdf') => {\n    try {\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return {\n        success: true,\n        message: `Report exported as ${format.toUpperCase()}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  return {\n    reports,\n    analytics,\n    loading,\n    error,\n    generateReport,\n    deleteReport,\n    getReportsByType,\n    getReportsByDateRange,\n    getAnalyticsData,\n    exportReport\n  };\n};\n_s(useReports, \"fo6LbrHnRXgDTouaEopZdS742Cc=\");","map":{"version":3,"names":["useState","useEffect","mockReports","id","title","type","date","generatedBy","status","data","totalMilk","averagePerCow","topProducer","totalCattle","totalCheckups","vaccinations","treatments","healthyCattle","revenue","expenses","profit","profitMargin","mockAnalytics","milkProduction","daily","weekly","monthly","financial","health","checkups","healthyRate","tasks","completed","pending","overdue","completionRate","useReports","_s","reports","setReports","analytics","setAnalytics","loading","setLoading","error","setError","fetchData","Promise","resolve","setTimeout","err","generateReport","reportData","newReport","Date","now","toISOString","split","generateMockData","prev","success","report","message","Math","floor","random","deleteReport","filter","getReportsByType","getReportsByDateRange","startDate","endDate","reportDate","getAnalyticsData","exportReport","reportId","format","toUpperCase"],"sources":["C:/VSCode/COWCO/COWCO/client/src/api/useReports.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Mock reports data\r\nconst mockReports = [\r\n  {\r\n    id: 1,\r\n    title: 'Monthly Milk Production Report',\r\n    type: 'production',\r\n    date: '2024-01-15',\r\n    generatedBy: 'John Manager',\r\n    status: 'completed',\r\n    data: {\r\n      totalMilk: 12500,\r\n      averagePerCow: 3125,\r\n      topProducer: 'Bessie',\r\n      totalCattle: 4\r\n    }\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Health Records Summary',\r\n    type: 'health',\r\n    date: '2024-01-14',\r\n    generatedBy: 'Dr. Sarah Vet',\r\n    status: 'completed',\r\n    data: {\r\n      totalCheckups: 4,\r\n      vaccinations: 2,\r\n      treatments: 1,\r\n      healthyCattle: 3\r\n    }\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Financial Report - Q4 2023',\r\n    type: 'financial',\r\n    date: '2024-01-10',\r\n    generatedBy: 'John Manager',\r\n    status: 'completed',\r\n    data: {\r\n      revenue: 45000,\r\n      expenses: 28000,\r\n      profit: 17000,\r\n      profitMargin: 37.8\r\n    }\r\n  }\r\n];\r\n\r\n// Mock analytics data\r\nconst mockAnalytics = {\r\n  milkProduction: {\r\n    daily: [25, 28, 30, 27, 29, 31, 26],\r\n    weekly: [180, 195, 210, 185],\r\n    monthly: [1250, 1320, 1400, 1280]\r\n  },\r\n  financial: {\r\n    revenue: [42000, 45000, 48000, 52000],\r\n    expenses: [28000, 29000, 31000, 32000],\r\n    profit: [14000, 16000, 17000, 20000]\r\n  },\r\n  health: {\r\n    vaccinations: 8,\r\n    checkups: 12,\r\n    treatments: 3,\r\n    healthyRate: 85\r\n  },\r\n  tasks: {\r\n    completed: 45,\r\n    pending: 8,\r\n    overdue: 2,\r\n    completionRate: 82\r\n  }\r\n};\r\n\r\nexport const useReports = () => {\r\n  const [reports, setReports] = useState([]);\r\n  const [analytics, setAnalytics] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setReports(mockReports);\r\n        setAnalytics(mockAnalytics);\r\n      } catch (err) {\r\n        setError('Failed to fetch reports data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const generateReport = async (reportData) => {\r\n    try {\r\n      const newReport = {\r\n        id: Date.now(),\r\n        ...reportData,\r\n        date: new Date().toISOString().split('T')[0],\r\n        status: 'completed',\r\n        data: generateMockData(reportData.type)\r\n      };\r\n      \r\n      setReports(prev => [...prev, newReport]);\r\n      return { success: true, report: newReport };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const generateMockData = (type) => {\r\n    switch (type) {\r\n      case 'production':\r\n        return {\r\n          totalMilk: Math.floor(Math.random() * 15000) + 10000,\r\n          averagePerCow: Math.floor(Math.random() * 4000) + 2500,\r\n          topProducer: 'Bessie',\r\n          totalCattle: 4\r\n        };\r\n      case 'health':\r\n        return {\r\n          totalCheckups: Math.floor(Math.random() * 10) + 1,\r\n          vaccinations: Math.floor(Math.random() * 5) + 1,\r\n          treatments: Math.floor(Math.random() * 3),\r\n          healthyCattle: Math.floor(Math.random() * 4) + 1\r\n        };\r\n      case 'financial':\r\n        return {\r\n          revenue: Math.floor(Math.random() * 60000) + 40000,\r\n          expenses: Math.floor(Math.random() * 40000) + 20000,\r\n          profit: Math.floor(Math.random() * 30000) + 10000,\r\n          profitMargin: Math.floor(Math.random() * 50) + 20\r\n        };\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n\r\n  const deleteReport = async (id) => {\r\n    try {\r\n      setReports(prev => prev.filter(report => report.id !== id));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const getReportsByType = (type) => {\r\n    return reports.filter(report => report.type === type);\r\n  };\r\n\r\n  const getReportsByDateRange = (startDate, endDate) => {\r\n    return reports.filter(report => {\r\n      const reportDate = new Date(report.date);\r\n      return reportDate >= new Date(startDate) && reportDate <= new Date(endDate);\r\n    });\r\n  };\r\n\r\n  const getAnalyticsData = () => {\r\n    return analytics;\r\n  };\r\n\r\n  const exportReport = async (reportId, format = 'pdf') => {\r\n    try {\r\n      // Simulate export process\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      return { success: true, message: `Report exported as ${format.toUpperCase()}` };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return {\r\n    reports,\r\n    analytics,\r\n    loading,\r\n    error,\r\n    generateReport,\r\n    deleteReport,\r\n    getReportsByType,\r\n    getReportsByDateRange,\r\n    getAnalyticsData,\r\n    exportReport\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}