{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Mock health records data\nconst mockHealthRecords = [{\n  id: 1,\n  cattleId: 'COW001',\n  cattleName: 'Bessie',\n  type: 'vaccination',\n  description: 'Annual vaccination - BVD, IBR, Leptospirosis',\n  date: '2024-01-10',\n  veterinarian: 'Dr. Sarah Vet',\n  status: 'completed',\n  notes: 'All vaccinations administered successfully. No adverse reactions observed.',\n  nextDueDate: '2025-01-10'\n}, {\n  id: 2,\n  cattleId: 'COW002',\n  cattleName: 'Daisy',\n  type: 'checkup',\n  description: 'Routine health check',\n  date: '2024-01-12',\n  veterinarian: 'Dr. Sarah Vet',\n  status: 'completed',\n  notes: 'Overall health is good. Weight is stable. Recommend monitoring feed intake.',\n  nextDueDate: '2024-04-12'\n}, {\n  id: 3,\n  cattleId: 'COW003',\n  cattleName: 'Molly',\n  type: 'treatment',\n  description: 'Treatment for minor injury - right hind leg',\n  date: '2024-01-08',\n  veterinarian: 'Dr. Sarah Vet',\n  status: 'in-progress',\n  notes: 'Minor swelling observed. Administered anti-inflammatory medication. Monitor for improvement.',\n  nextDueDate: '2024-01-15'\n}, {\n  id: 4,\n  cattleId: 'COW004',\n  cattleName: 'Rosie',\n  type: 'vaccination',\n  description: 'Young cattle vaccination series',\n  date: '2024-01-14',\n  veterinarian: 'Dr. Sarah Vet',\n  status: 'completed',\n  notes: 'First vaccination in series completed. Schedule follow-up in 3 weeks.',\n  nextDueDate: '2024-02-04'\n}];\n\n// Mock health alerts data\nconst mockHealthAlerts = [{\n  id: 1,\n  cattleId: 'COW003',\n  cattleName: 'Molly',\n  type: 'follow-up',\n  description: 'Follow-up examination for leg injury',\n  dueDate: '2024-01-15',\n  priority: 'high',\n  status: 'pending'\n}, {\n  id: 2,\n  cattleId: 'COW004',\n  cattleName: 'Rosie',\n  type: 'vaccination',\n  description: 'Second vaccination in series',\n  dueDate: '2024-02-04',\n  priority: 'medium',\n  status: 'pending'\n}, {\n  id: 3,\n  cattleId: 'COW002',\n  cattleName: 'Daisy',\n  type: 'checkup',\n  description: 'Quarterly health check',\n  dueDate: '2024-04-12',\n  priority: 'low',\n  status: 'pending'\n}];\nexport const useVet = () => {\n  _s();\n  const [healthRecords, setHealthRecords] = useState([]);\n  const [healthAlerts, setHealthAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setHealthRecords(mockHealthRecords);\n        setHealthAlerts(mockHealthAlerts);\n      } catch (err) {\n        setError('Failed to fetch veterinary data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const addHealthRecord = async recordData => {\n    try {\n      const newRecord = {\n        id: Date.now(),\n        ...recordData,\n        date: recordData.date || new Date().toISOString().split('T')[0],\n        status: 'completed'\n      };\n      setHealthRecords(prev => [...prev, newRecord]);\n      return {\n        success: true,\n        record: newRecord\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateHealthRecord = async (id, recordData) => {\n    try {\n      setHealthRecords(prev => prev.map(record => record.id === id ? {\n        ...record,\n        ...recordData\n      } : record));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const deleteHealthRecord = async id => {\n    try {\n      setHealthRecords(prev => prev.filter(record => record.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const addHealthAlert = async alertData => {\n    try {\n      const newAlert = {\n        id: Date.now(),\n        ...alertData,\n        status: 'pending'\n      };\n      setHealthAlerts(prev => [...prev, newAlert]);\n      return {\n        success: true,\n        alert: newAlert\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateHealthAlert = async (id, alertData) => {\n    try {\n      setHealthAlerts(prev => prev.map(alert => alert.id === id ? {\n        ...alert,\n        ...alertData\n      } : alert));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const deleteHealthAlert = async id => {\n    try {\n      setHealthAlerts(prev => prev.filter(alert => alert.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getHealthRecordsByCattle = cattleId => {\n    return healthRecords.filter(record => record.cattleId === cattleId);\n  };\n  const getHealthRecordsByType = type => {\n    return healthRecords.filter(record => record.type === type);\n  };\n  const getUpcomingAlerts = () => {\n    const today = new Date();\n    return healthAlerts.filter(alert => {\n      const dueDate = new Date(alert.dueDate);\n      return dueDate >= today && alert.status === 'pending';\n    });\n  };\n  return {\n    healthRecords,\n    healthAlerts,\n    loading,\n    error,\n    addHealthRecord,\n    updateHealthRecord,\n    deleteHealthRecord,\n    addHealthAlert,\n    updateHealthAlert,\n    deleteHealthAlert,\n    getHealthRecordsByCattle,\n    getHealthRecordsByType,\n    getUpcomingAlerts\n  };\n};\n_s(useVet, \"BdqC2y7qbDtjgXmPoqSY5kXFxmY=\");","map":{"version":3,"names":["useState","useEffect","mockHealthRecords","id","cattleId","cattleName","type","description","date","veterinarian","status","notes","nextDueDate","mockHealthAlerts","dueDate","priority","useVet","_s","healthRecords","setHealthRecords","healthAlerts","setHealthAlerts","loading","setLoading","error","setError","fetchData","Promise","resolve","setTimeout","err","addHealthRecord","recordData","newRecord","Date","now","toISOString","split","prev","success","record","message","updateHealthRecord","map","deleteHealthRecord","filter","addHealthAlert","alertData","newAlert","alert","updateHealthAlert","deleteHealthAlert","getHealthRecordsByCattle","getHealthRecordsByType","getUpcomingAlerts","today"],"sources":["C:/VSCode/CowCo_Authmodule/client/src/api/useVet.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Mock health records data\r\nconst mockHealthRecords = [\r\n  {\r\n    id: 1,\r\n    cattleId: 'COW001',\r\n    cattleName: 'Bessie',\r\n    type: 'vaccination',\r\n    description: 'Annual vaccination - BVD, IBR, Leptospirosis',\r\n    date: '2024-01-10',\r\n    veterinarian: 'Dr. Sarah Vet',\r\n    status: 'completed',\r\n    notes: 'All vaccinations administered successfully. No adverse reactions observed.',\r\n    nextDueDate: '2025-01-10'\r\n  },\r\n  {\r\n    id: 2,\r\n    cattleId: 'COW002',\r\n    cattleName: 'Daisy',\r\n    type: 'checkup',\r\n    description: 'Routine health check',\r\n    date: '2024-01-12',\r\n    veterinarian: 'Dr. Sarah Vet',\r\n    status: 'completed',\r\n    notes: 'Overall health is good. Weight is stable. Recommend monitoring feed intake.',\r\n    nextDueDate: '2024-04-12'\r\n  },\r\n  {\r\n    id: 3,\r\n    cattleId: 'COW003',\r\n    cattleName: 'Molly',\r\n    type: 'treatment',\r\n    description: 'Treatment for minor injury - right hind leg',\r\n    date: '2024-01-08',\r\n    veterinarian: 'Dr. Sarah Vet',\r\n    status: 'in-progress',\r\n    notes: 'Minor swelling observed. Administered anti-inflammatory medication. Monitor for improvement.',\r\n    nextDueDate: '2024-01-15'\r\n  },\r\n  {\r\n    id: 4,\r\n    cattleId: 'COW004',\r\n    cattleName: 'Rosie',\r\n    type: 'vaccination',\r\n    description: 'Young cattle vaccination series',\r\n    date: '2024-01-14',\r\n    veterinarian: 'Dr. Sarah Vet',\r\n    status: 'completed',\r\n    notes: 'First vaccination in series completed. Schedule follow-up in 3 weeks.',\r\n    nextDueDate: '2024-02-04'\r\n  }\r\n];\r\n\r\n// Mock health alerts data\r\nconst mockHealthAlerts = [\r\n  {\r\n    id: 1,\r\n    cattleId: 'COW003',\r\n    cattleName: 'Molly',\r\n    type: 'follow-up',\r\n    description: 'Follow-up examination for leg injury',\r\n    dueDate: '2024-01-15',\r\n    priority: 'high',\r\n    status: 'pending'\r\n  },\r\n  {\r\n    id: 2,\r\n    cattleId: 'COW004',\r\n    cattleName: 'Rosie',\r\n    type: 'vaccination',\r\n    description: 'Second vaccination in series',\r\n    dueDate: '2024-02-04',\r\n    priority: 'medium',\r\n    status: 'pending'\r\n  },\r\n  {\r\n    id: 3,\r\n    cattleId: 'COW002',\r\n    cattleName: 'Daisy',\r\n    type: 'checkup',\r\n    description: 'Quarterly health check',\r\n    dueDate: '2024-04-12',\r\n    priority: 'low',\r\n    status: 'pending'\r\n  }\r\n];\r\n\r\nexport const useVet = () => {\r\n  const [healthRecords, setHealthRecords] = useState([]);\r\n  const [healthAlerts, setHealthAlerts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setHealthRecords(mockHealthRecords);\r\n        setHealthAlerts(mockHealthAlerts);\r\n      } catch (err) {\r\n        setError('Failed to fetch veterinary data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const addHealthRecord = async (recordData) => {\r\n    try {\r\n      const newRecord = {\r\n        id: Date.now(),\r\n        ...recordData,\r\n        date: recordData.date || new Date().toISOString().split('T')[0],\r\n        status: 'completed'\r\n      };\r\n      \r\n      setHealthRecords(prev => [...prev, newRecord]);\r\n      return { success: true, record: newRecord };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const updateHealthRecord = async (id, recordData) => {\r\n    try {\r\n      setHealthRecords(prev => prev.map(record => \r\n        record.id === id ? { ...record, ...recordData } : record\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const deleteHealthRecord = async (id) => {\r\n    try {\r\n      setHealthRecords(prev => prev.filter(record => record.id !== id));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const addHealthAlert = async (alertData) => {\r\n    try {\r\n      const newAlert = {\r\n        id: Date.now(),\r\n        ...alertData,\r\n        status: 'pending'\r\n      };\r\n      \r\n      setHealthAlerts(prev => [...prev, newAlert]);\r\n      return { success: true, alert: newAlert };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const updateHealthAlert = async (id, alertData) => {\r\n    try {\r\n      setHealthAlerts(prev => prev.map(alert => \r\n        alert.id === id ? { ...alert, ...alertData } : alert\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const deleteHealthAlert = async (id) => {\r\n    try {\r\n      setHealthAlerts(prev => prev.filter(alert => alert.id !== id));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const getHealthRecordsByCattle = (cattleId) => {\r\n    return healthRecords.filter(record => record.cattleId === cattleId);\r\n  };\r\n\r\n  const getHealthRecordsByType = (type) => {\r\n    return healthRecords.filter(record => record.type === type);\r\n  };\r\n\r\n  const getUpcomingAlerts = () => {\r\n    const today = new Date();\r\n    return healthAlerts.filter(alert => {\r\n      const dueDate = new Date(alert.dueDate);\r\n      return dueDate >= today && alert.status === 'pending';\r\n    });\r\n  };\r\n\r\n  return {\r\n    healthRecords,\r\n    healthAlerts,\r\n    loading,\r\n    error,\r\n    addHealthRecord,\r\n    updateHealthRecord,\r\n    deleteHealthRecord,\r\n    addHealthAlert,\r\n    updateHealthAlert,\r\n    deleteHealthAlert,\r\n    getHealthRecordsByCattle,\r\n    getHealthRecordsByType,\r\n    getUpcomingAlerts\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}