{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Mock users data\nconst mockUsers = [{\n  id: 1,\n  name: 'John Manager',\n  email: 'manager@cowco.com',\n  role: 'Farm Manager',\n  status: 'active',\n  lastLogin: '2024-01-15T08:30:00',\n  createdAt: '2023-01-15',\n  permissions: ['cattle', 'tasks', 'reports', 'analytics']\n}, {\n  id: 2,\n  name: 'Dr. Sarah Vet',\n  email: 'vet@cowco.com',\n  role: 'Veterinarian',\n  status: 'active',\n  lastLogin: '2024-01-15T09:15:00',\n  createdAt: '2023-02-20',\n  permissions: ['cattle', 'health-records', 'health-alerts']\n}, {\n  id: 3,\n  name: 'Mike Worker',\n  email: 'worker@cowco.com',\n  role: 'Worker',\n  status: 'active',\n  lastLogin: '2024-01-15T07:45:00',\n  createdAt: '2023-03-10',\n  permissions: ['cattle', 'tasks', 'checklist']\n}, {\n  id: 4,\n  name: 'Admin User',\n  email: 'admin@cowco.com',\n  role: 'Admin',\n  status: 'active',\n  lastLogin: '2024-01-15T10:00:00',\n  createdAt: '2023-01-01',\n  permissions: ['all']\n}];\n\n// Mock activity logs data\nconst mockLogs = [{\n  id: 1,\n  userId: 1,\n  userName: 'John Manager',\n  action: 'login',\n  description: 'User logged in successfully',\n  timestamp: '2024-01-15T08:30:00',\n  ipAddress: '192.168.1.100',\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n}, {\n  id: 2,\n  userId: 1,\n  userName: 'John Manager',\n  action: 'cattle_add',\n  description: 'Added new cattle: Rosie (COW004)',\n  timestamp: '2024-01-15T08:35:00',\n  ipAddress: '192.168.1.100',\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n}, {\n  id: 3,\n  userId: 2,\n  userName: 'Dr. Sarah Vet',\n  action: 'health_record_add',\n  description: 'Added health record for Bessie (COW001)',\n  timestamp: '2024-01-15T09:20:00',\n  ipAddress: '192.168.1.101',\n  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'\n}, {\n  id: 4,\n  userId: 3,\n  userName: 'Mike Worker',\n  action: 'task_complete',\n  description: 'Completed task: Morning Milking',\n  timestamp: '2024-01-15T08:45:00',\n  ipAddress: '192.168.1.102',\n  userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15'\n}, {\n  id: 5,\n  userId: 4,\n  userName: 'Admin User',\n  action: 'user_create',\n  description: 'Created new user: Test User',\n  timestamp: '2024-01-15T10:15:00',\n  ipAddress: '192.168.1.103',\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n}];\n\n// Mock settings data\nconst mockSettings = {\n  notifications: {\n    email: true,\n    sms: false,\n    push: true\n  },\n  reminders: {\n    vaccination: 7,\n    healthCheck: 30,\n    milking: 1\n  },\n  backup: {\n    autoBackup: true,\n    backupFrequency: 'daily',\n    retentionDays: 30\n  },\n  security: {\n    sessionTimeout: 30,\n    requireMFA: false,\n    passwordExpiry: 90\n  }\n};\nexport const useAdmin = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const [settings, setSettings] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setUsers(mockUsers);\n        setLogs(mockLogs);\n        setSettings(mockSettings);\n      } catch (err) {\n        setError('Failed to fetch admin data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // User management functions\n  const addUser = async userData => {\n    try {\n      const newUser = {\n        id: Date.now(),\n        ...userData,\n        status: 'active',\n        createdAt: new Date().toISOString().split('T')[0],\n        lastLogin: null,\n        permissions: getPermissionsByRole(userData.role)\n      };\n      setUsers(prev => [...prev, newUser]);\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateUser = async (id, userData) => {\n    try {\n      setUsers(prev => prev.map(user => user.id === id ? {\n        ...user,\n        ...userData\n      } : user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const deleteUser = async id => {\n    try {\n      setUsers(prev => prev.filter(user => user.id !== id));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const toggleUserStatus = async id => {\n    try {\n      setUsers(prev => prev.map(user => user.id === id ? {\n        ...user,\n        status: user.status === 'active' ? 'inactive' : 'active'\n      } : user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Log management functions\n  const getLogsByUser = userId => {\n    return logs.filter(log => log.userId === userId);\n  };\n  const getLogsByAction = action => {\n    return logs.filter(log => log.action === action);\n  };\n  const getLogsByDateRange = (startDate, endDate) => {\n    return logs.filter(log => {\n      const logDate = new Date(log.timestamp);\n      return logDate >= new Date(startDate) && logDate <= new Date(endDate);\n    });\n  };\n\n  // Settings management functions\n  const updateSettings = async newSettings => {\n    try {\n      setSettings(prev => ({\n        ...prev,\n        ...newSettings\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getPermissionsByRole = role => {\n    switch (role) {\n      case 'Farm Manager':\n        return ['cattle', 'tasks', 'reports', 'analytics'];\n      case 'Veterinarian':\n        return ['cattle', 'health-records', 'health-alerts'];\n      case 'Worker':\n        return ['cattle', 'tasks', 'checklist'];\n      case 'Admin':\n        return ['all'];\n      default:\n        return [];\n    }\n  };\n  const exportLogs = async (format = 'csv') => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return {\n        success: true,\n        message: `Logs exported as ${format.toUpperCase()}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  return {\n    users,\n    logs,\n    settings,\n    loading,\n    error,\n    addUser,\n    updateUser,\n    deleteUser,\n    toggleUserStatus,\n    getLogsByUser,\n    getLogsByAction,\n    getLogsByDateRange,\n    updateSettings,\n    exportLogs\n  };\n};\n_s(useAdmin, \"2jlnUoI99og/HZlzLUCZyyvbEMM=\");","map":{"version":3,"names":["useState","useEffect","mockUsers","id","name","email","role","status","lastLogin","createdAt","permissions","mockLogs","userId","userName","action","description","timestamp","ipAddress","userAgent","mockSettings","notifications","sms","push","reminders","vaccination","healthCheck","milking","backup","autoBackup","backupFrequency","retentionDays","security","sessionTimeout","requireMFA","passwordExpiry","useAdmin","_s","users","setUsers","logs","setLogs","settings","setSettings","loading","setLoading","error","setError","fetchData","Promise","resolve","setTimeout","err","addUser","userData","newUser","Date","now","toISOString","split","getPermissionsByRole","prev","success","user","message","updateUser","map","deleteUser","filter","toggleUserStatus","getLogsByUser","log","getLogsByAction","getLogsByDateRange","startDate","endDate","logDate","updateSettings","newSettings","exportLogs","format","toUpperCase"],"sources":["C:/VSCode/CowCo_Authmodule/client/src/api/useAdmin.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Mock users data\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    name: 'John Manager',\r\n    email: 'manager@cowco.com',\r\n    role: 'Farm Manager',\r\n    status: 'active',\r\n    lastLogin: '2024-01-15T08:30:00',\r\n    createdAt: '2023-01-15',\r\n    permissions: ['cattle', 'tasks', 'reports', 'analytics']\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Dr. Sarah Vet',\r\n    email: 'vet@cowco.com',\r\n    role: 'Veterinarian',\r\n    status: 'active',\r\n    lastLogin: '2024-01-15T09:15:00',\r\n    createdAt: '2023-02-20',\r\n    permissions: ['cattle', 'health-records', 'health-alerts']\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Mike Worker',\r\n    email: 'worker@cowco.com',\r\n    role: 'Worker',\r\n    status: 'active',\r\n    lastLogin: '2024-01-15T07:45:00',\r\n    createdAt: '2023-03-10',\r\n    permissions: ['cattle', 'tasks', 'checklist']\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Admin User',\r\n    email: 'admin@cowco.com',\r\n    role: 'Admin',\r\n    status: 'active',\r\n    lastLogin: '2024-01-15T10:00:00',\r\n    createdAt: '2023-01-01',\r\n    permissions: ['all']\r\n  }\r\n];\r\n\r\n// Mock activity logs data\r\nconst mockLogs = [\r\n  {\r\n    id: 1,\r\n    userId: 1,\r\n    userName: 'John Manager',\r\n    action: 'login',\r\n    description: 'User logged in successfully',\r\n    timestamp: '2024-01-15T08:30:00',\r\n    ipAddress: '192.168.1.100',\r\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n  },\r\n  {\r\n    id: 2,\r\n    userId: 1,\r\n    userName: 'John Manager',\r\n    action: 'cattle_add',\r\n    description: 'Added new cattle: Rosie (COW004)',\r\n    timestamp: '2024-01-15T08:35:00',\r\n    ipAddress: '192.168.1.100',\r\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n  },\r\n  {\r\n    id: 3,\r\n    userId: 2,\r\n    userName: 'Dr. Sarah Vet',\r\n    action: 'health_record_add',\r\n    description: 'Added health record for Bessie (COW001)',\r\n    timestamp: '2024-01-15T09:20:00',\r\n    ipAddress: '192.168.1.101',\r\n    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'\r\n  },\r\n  {\r\n    id: 4,\r\n    userId: 3,\r\n    userName: 'Mike Worker',\r\n    action: 'task_complete',\r\n    description: 'Completed task: Morning Milking',\r\n    timestamp: '2024-01-15T08:45:00',\r\n    ipAddress: '192.168.1.102',\r\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15'\r\n  },\r\n  {\r\n    id: 5,\r\n    userId: 4,\r\n    userName: 'Admin User',\r\n    action: 'user_create',\r\n    description: 'Created new user: Test User',\r\n    timestamp: '2024-01-15T10:15:00',\r\n    ipAddress: '192.168.1.103',\r\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n  }\r\n];\r\n\r\n// Mock settings data\r\nconst mockSettings = {\r\n  notifications: {\r\n    email: true,\r\n    sms: false,\r\n    push: true\r\n  },\r\n  reminders: {\r\n    vaccination: 7,\r\n    healthCheck: 30,\r\n    milking: 1\r\n  },\r\n  backup: {\r\n    autoBackup: true,\r\n    backupFrequency: 'daily',\r\n    retentionDays: 30\r\n  },\r\n  security: {\r\n    sessionTimeout: 30,\r\n    requireMFA: false,\r\n    passwordExpiry: 90\r\n  }\r\n};\r\n\r\nexport const useAdmin = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [logs, setLogs] = useState([]);\r\n  const [settings, setSettings] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setUsers(mockUsers);\r\n        setLogs(mockLogs);\r\n        setSettings(mockSettings);\r\n      } catch (err) {\r\n        setError('Failed to fetch admin data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // User management functions\r\n  const addUser = async (userData) => {\r\n    try {\r\n      const newUser = {\r\n        id: Date.now(),\r\n        ...userData,\r\n        status: 'active',\r\n        createdAt: new Date().toISOString().split('T')[0],\r\n        lastLogin: null,\r\n        permissions: getPermissionsByRole(userData.role)\r\n      };\r\n      \r\n      setUsers(prev => [...prev, newUser]);\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const updateUser = async (id, userData) => {\r\n    try {\r\n      setUsers(prev => prev.map(user => \r\n        user.id === id ? { ...user, ...userData } : user\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (id) => {\r\n    try {\r\n      setUsers(prev => prev.filter(user => user.id !== id));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const toggleUserStatus = async (id) => {\r\n    try {\r\n      setUsers(prev => prev.map(user => \r\n        user.id === id \r\n          ? { ...user, status: user.status === 'active' ? 'inactive' : 'active' }\r\n          : user\r\n      ));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Log management functions\r\n  const getLogsByUser = (userId) => {\r\n    return logs.filter(log => log.userId === userId);\r\n  };\r\n\r\n  const getLogsByAction = (action) => {\r\n    return logs.filter(log => log.action === action);\r\n  };\r\n\r\n  const getLogsByDateRange = (startDate, endDate) => {\r\n    return logs.filter(log => {\r\n      const logDate = new Date(log.timestamp);\r\n      return logDate >= new Date(startDate) && logDate <= new Date(endDate);\r\n    });\r\n  };\r\n\r\n  // Settings management functions\r\n  const updateSettings = async (newSettings) => {\r\n    try {\r\n      setSettings(prev => ({ ...prev, ...newSettings }));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const getPermissionsByRole = (role) => {\r\n    switch (role) {\r\n      case 'Farm Manager':\r\n        return ['cattle', 'tasks', 'reports', 'analytics'];\r\n      case 'Veterinarian':\r\n        return ['cattle', 'health-records', 'health-alerts'];\r\n      case 'Worker':\r\n        return ['cattle', 'tasks', 'checklist'];\r\n      case 'Admin':\r\n        return ['all'];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const exportLogs = async (format = 'csv') => {\r\n    try {\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      return { success: true, message: `Logs exported as ${format.toUpperCase()}` };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return {\r\n    users,\r\n    logs,\r\n    settings,\r\n    loading,\r\n    error,\r\n    addUser,\r\n    updateUser,\r\n    deleteUser,\r\n    toggleUserStatus,\r\n    getLogsByUser,\r\n    getLogsByAction,\r\n    getLogsByDateRange,\r\n    updateSettings,\r\n    exportLogs\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}